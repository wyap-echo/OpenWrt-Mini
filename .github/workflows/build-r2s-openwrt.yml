#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build NanoPi R2S OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 12 * * 2,4,6
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/project-openwrt/openwrt
  REPO_BRANCH: openwrt-18.06-k5.4
  CONFIG_FILE: config/rockchip/r2s-openwrt-target.config
  DIY_SH: scripts/project-openwrt.sh
  UPLOAD_WETRANSFER: true
  UPLOAD_COWTRANSFER: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-18.04

    outputs:
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone Source Code
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

      - name: Update Feeds
        id: update
        run: |
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          ./scripts/feeds update -a

      - name: Install Feeds
        run: |
          cd $OPENWRTROOT
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRTROOT/files
          cp $CONFIG_FILE $OPENWRTROOT/.config
          cat config/firmware-extra.config >> $OPENWRTROOT/.config
          chmod +x scripts/*.sh
          cd $OPENWRTROOT
          ../$DIY_SH
          ../scripts/preset-terminal-tools.sh

      - name: Download All Packages
        id: package
        run: |
          cd $OPENWRTROOT
          make defconfig
          echo -e "$(nproc) threads download"
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware Packages
        id: compile
        run: |
          rm -f $OPENWRTROOT/.config*
          cp $CONFIG_FILE $OPENWRTROOT/.config
          cat config/firmware-extra.config >> $OPENWRTROOT/.config
          cd $OPENWRTROOT
          make defconfig
          echo -e "$(nproc) threads compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
          make diffconfig
          make package/compile -j$(nproc) IGNORE_ERRORS="y m" || make package/compile -j1 V=s IGNORE_ERRORS="y m"
          make package/index
          cd $OPENWRTROOT/bin/packages/*
          PLATFORM=$(basename `pwd`)
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
          echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
          cd $OPENWRTROOT/bin/targets/*
          TARGET=$(basename `pwd`)
          echo "TARGET=$TARGET" >> $GITHUB_ENV
          echo "::set-output name=TARGET::$(echo $TARGET)"
          cd *
          SUBTARGET=$(basename `pwd`)
          echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
          echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=FIRMWARE::$(echo $PWD)"
          echo "::set-output name=COMPILE_STATUS::success"
          
      - name: Generate Firmware
        if: steps.compile.outputs.COMPILE_STATUS == 'success'
        id: generate
        run: |
          cd data/opkg
          sed -i "s/subtarget/$SUBTARGET/g" distfeeds.conf
          sed -i "s/target\//$TARGET\//g" distfeeds.conf
          sed -i "s/platform/$PLATFORM/g" distfeeds.conf
          sed -i "s/date/$(date +'%Y-%m-%d')/g" distfeeds.conf
          cd $OPENWRTROOT
          mkdir -p files/etc/opkg
          cp ../data/opkg/distfeeds.conf files/etc/opkg/distfeeds.conf
          mkdir -p files/etc/uci-defaults/
          cp ../scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          mkdir -p files/bin
          cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
          make checksum
          echo "::set-output name=GENERATE_STATUS::success"

  Upload:
    needs: [Build]
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Restore Variables
        run: |
          echo "PLATFORM=$(echo '${{needs.Build.outputs.PLATFORM}}')" >> $GITHUB_ENV
          echo "TARGET=$(echo '${{needs.Build.outputs.TARGET}}')" >> $GITHUB_ENV
          echo "SUBTARGET=$(echo '${{needs.Build.outputs.SUBTARGET}}')" >> $GITHUB_ENV
          echo "GENERATE_STATUS=$(echo '${{needs.Build.outputs.GENERATE_STATUS}}')" >> $GITHUB_ENV

      - name: Organize Files
        id: organize
        if: env.GENERATE_STATUS == 'success'
        run: |
          curl -sL https://git.io/file-transfer | bash -s beta
          sudo mv transfer /usr/bin
          sudo chmod +x /usr/bin/transfer
          cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          rm -rf packages
          df -hT $PWD
          echo "::set-output name=ORGANIZE_STATUS::success"

      - name: Upload Firmware To CowTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_COWTRANSFER == 'true'
        run: |
          cd $OPENWRTROOT
          transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=Firmware-Cowtransfer.com::$(cat cowtransfer.log | grep https)"

      - name: Upload Firmware To WeTransfer
        if: steps.organize.outputs.ORGANIZE_STATUS == 'success' && env.UPLOAD_WETRANSFER == 'true'
        run: |
          cd $OPENWRTROOT
          transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=Firmware-Wetransfer.com::$(cat wetransfer.log | grep https)"
